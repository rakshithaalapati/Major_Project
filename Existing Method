clear all;
clc;
inputImage = imread('train_00353.jpg');
F=1;
tolerance = 1e-3; % Adjust as needed (e.g., 0.001)
if size(inputImage, 3) == 3
    inputImage = rgb2gray(inputImage);
end
imshow(inputImage,[]);
title('input image');
paddedImage = padarray(inputImage, [1, 1], 0);
[rows, cols] = size(inputImage);
lbpImage = zeros(rows, cols, 'uint8');
for i = 2:rows+1
    for j = 2:cols+1
        neighborhood = paddedImage(i-1:i+1, j-1:j+1);
        centerPixel = neighborhood(2, 2);
        binaryPattern = (neighborhood >= centerPixel);
        binaryPattern(2, 2) = 0;
        weights = [1 2 4; 128 0 8; 64 32 16];
        s = 0;
        for k = 1:3
            for m = 1:3
                s = s + binaryPattern(k, m) * weights(k, m);
            end
        end
        lbpImage(i-1, j-1) = s;
    end
end
figure;
imshow(lbpImage, []);
title('Local Binary Pattern Image');
lbpHistogram = histcounts(lbpImage(:), 'BinLimits', [0, 255], 'NumBins', 256);
lbpHistogram = lbpHistogram / sum(lbpHistogram);
figure;
bar(0:255, lbpHistogram);
title('LBP Histogram');
xlabel('LBP Value');
ylabel('Frequency');
folder = 'train'; 
imageFiles = dir(fullfile(folder, '*.jpg')); 
for a=1:length(imageFiles)
    trainImage = imread(fullfile(folder, imageFiles(a).name));
    trainImage = rgb2gray(trainImage);
    paddedImage1 = padarray(trainImage, [1, 1], 0);
    [rows, cols] = size(trainImage);
    lbpImage1 = zeros(rows, cols, 'uint8');
    for i = 2:rows+1
        for j = 2:cols+1
            neighborhood = paddedImage1(i-1:i+1, j-1:j+1);
            centerPixel = neighborhood(2, 2);
            binaryPattern = (neighborhood >= centerPixel);
            binaryPattern(2, 2) = 0;
            weights = [1 2 4; 128 0 8; 64 32 16];
            s = 0;
            for k = 1:3
                for m = 1:3
                    s = s + binaryPattern(k, m) * weights(k, m);
                end
            end
            lbpImage1(i-1, j-1) = s;
        end
    end
    lbpHistogram1 = histcounts(lbpImage1(:), 'BinLimits', [0, 255], 'NumBins', 256);
    lc=lbpHistogram1;
    lbpHistogram1 = lbpHistogram1 / sum(lbpHistogram1);
    similarity=sum(min(lbpHistogram,lbpHistogram1));
     if abs(similarity - 1) < tolerance
        fprintf('Input image is SIMILAR to %s (Similarity: %.4f)\n', imageFiles(a).name, similarity);
        F=0;
        break;
    end
end
if F==1
    disp('not similar');
end
